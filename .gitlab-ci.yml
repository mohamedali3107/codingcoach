stages:
  - test
  - build
  - deploy

variables:
  # Set your environment variables here
  MYSQL_DATABASE: "dashboard"
  MYSQL_USER: "root"
  MYSQL_PASSWORD: "root"
  MYSQL_HOST: "mysql"
  #DJANGO_SECRET_KEY: "your_django_secret_key"
  #DJANGO_DEBUG: "False"
  #DJANGO_ALLOWED_HOSTS: "your_domain.com"
  DJANGO_DB_ENGINE: "mysql"
  DJANGO_DB_NAME: $MYSQL_DATABASE
  DJANGO_DB_USER: $MYSQL_USER
  DJANGO_DB_PASSWORD: $MYSQL_PASSWORD
  DJANGO_DB_HOST: $MYSQL_HOST
  DJANGO_DB_PORT: "3306"
  CI_REGISTRY_IMAGE : 
  REGISTRY_IMAGE_DJANGO: $CI_REGISTRY_IMAGE/django
  REGISTRY_IMAGE_MYSQL: $CI_REGISTRY_IMAGE/mysql


default:
  image: ubuntu:22.04
  #
  # Pick zero or more services to be used on all builds.
  # Only needed when using a docker container to run your tests in.
  # Check out: https://docs.gitlab.com/ee/ci/services/index.html
  services:
    - mysql:8.0
  #
  # This folder is cached between builds
  # http://docs.gitlab.com/ee/ci/yaml/README.html#cache
  cache:
    paths:
      - ~/.cache/pip/
  before_script:
    - apt -y update
    - apt -y install apt-utils
    - apt -y install net-tools python3.8 python3-pip mysql-client libmysqlclient-dev
    - apt -y upgrade
    - pip3 install -r requirements.txt
  

test:
  stage: test
  script:
    - echo "TESTS"
  only:
    - tags 
  
build:
  stage: build
  script:
    - python3 manage.py makemigrations
    - python3 manage.py migrate
    - python3 manage.py check
    - docker-compose build
    - docker push $REGISTRY_IMAGE_DJANGO
    - docker push $REGISTRY_IMAGE_MYSQL
  only:
    - tags 
  
deploy:
  stage: deploy
  only:
    - tags
  script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
